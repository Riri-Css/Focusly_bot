const OpenAI = require('openai');
const { User } = require('../models/user');
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const MAX_DAILY_USES = {
Â  trial: 5,
Â  basic: 10,
Â  premium: Infinity,
Â  expired: 0
};

// Check if user has access to smart response
async function canUseAI(user) {
Â  const today = new Date().toISOString().split('T')[0];

Â  if (user.lastAiUseDate !== today) {
Â  Â  user.dailyAiUsageCount = 0;
Â  Â  user.lastAiUseDate = today;
Â  }

Â  const plan = user.subscriptionPlan || user.subscriptionStatus || 'trial';
Â  const limit = MAX_DAILY_USES[plan] || 0;

Â  if (user.dailyAiUsageCount >= limit) {
Â  Â  return { allowed: false, reason: 'quota' };
Â  }

Â  user.dailyAiUsageCount += 1;
Â  await user.save();
Â  return { allowed: true };
}

async function getSmartResponse(user, message) {
Â  const access = await canUseAI(user);
Â  if (!access.allowed) {
Â  Â  if (user.subscriptionStatus === 'expired') {
Â  Â  Â  return `ðŸ”’ Your access has expired. Please subscribe to continue using Focuslyâ€™s AI features.`;
Â  Â  }
Â  Â  return `ðŸ§  You've reached your daily AI limit.\nUpgrade to Premium for unlimited smart responses.`;
Â  }

Â  try {
Â  Â  const prompt = `You're a friendly, but strict and no-nonsense accountability coach. The user said: "${message}". Respond with guidance, motivation, or a smart question.`;

Â  Â  const response = await openai.chat.completions.create({
Â  Â  Â  model: 'gpt-4',
Â  Â  Â  messages: [
Â  Â  Â  Â  { role: 'system', content: 'You are a helpful productivity coach named FocuslyBot.' },
Â  Â  Â  Â  { role: 'user', content: prompt }
Â  Â  Â  ],
Â  Â  Â  max_tokens: 100
Â  Â  });

Â  Â  return response.choices[0].message.content.trim();
Â  } catch (err) {
Â  Â  console.error('Smart response error:', err.message);
Â  Â  return `Sorry, I couldnâ€™t think of a smart reply right now.`;
Â  }
}

module.exports = getSmartResponse;
